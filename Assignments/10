#include <stdio.h>
#include <string.h>
#include <time.h>

struct Employee {
    int employeeCode;
    char employeeName[100];
    char dateOfJoining[11];  // Date format: DD/MM/YYYY
};

void assignEmployeeDetails(struct Employee *emp) {
    printf("Enter Employee Code: ");
    scanf("%d", &emp->employeeCode);
    getchar();  // To clear the newline left by scanf
    printf("Enter Employee Name: ");
    fgets(emp->employeeName, sizeof(emp->employeeName), stdin);
    emp->employeeName[strcspn(emp->employeeName, "\n")] = 0;  // Remove newline character from name
    printf("Enter Date of Joining (DD/MM/YYYY): ");
    scanf("%s", emp->dateOfJoining);
}

void calculateTenureAndDisplay(struct Employee employees[], int numEmployees) {
    time_t t = time(NULL);
    struct tm *currentTime = localtime(&t);
    int currentDay = currentTime->tm_mday;
    int currentMonth = currentTime->tm_mon + 1;  // Months are 0-11
    int currentYear = currentTime->tm_year + 1900;

    int countMoreThan3Years = 0;

    for (int i = 0; i < numEmployees; i++) {
        int joinDay, joinMonth, joinYear;
        sscanf(employees[i].dateOfJoining, "%d/%d/%d", &joinDay, &joinMonth, &joinYear);

        int tenure = currentYear - joinYear;
        if (currentMonth < joinMonth || (currentMonth == joinMonth && currentDay < joinDay)) {
            tenure--;  // If the employee hasn't yet reached their anniversary this year
        }

        if (tenure > 3) {
            printf("\nEmployee Code: %d\n", employees[i].employeeCode);
            printf("Employee Name: %s\n", employees[i].employeeName);
            printf("Date of Joining: %s\n", employees[i].dateOfJoining);
            printf("Tenure: %d years\n", tenure);
            countMoreThan3Years++;
        }
    }

    printf("\nTotal Employees with more than 3 years of service: %d\n", countMoreThan3Years);
}

int main() {
    struct Employee employees[4];

    for (int i = 0; i < 4; i++) {
        printf("\nEnter details for Employee %d:\n", i + 1);
        assignEmployeeDetails(&employees[i]);
    }

    calculateTenureAndDisplay(employees, 4);

    return 0;
}
